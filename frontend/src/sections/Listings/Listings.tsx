import { gql, useMutation, useQuery } from '@apollo/client';
import { Avatar, Button, List, Spin } from 'antd';
import { ListingsSkeleton } from './components';
import './styles/Listings.css';

// automatically generated by apollo-cli
import { Listings as ListingsData } from './__generated__/Listings';
import {
  Mutation as DeleteListingData,
  DeleteListingVariables,
} from './__generated__/Mutation';

const LISTINGS = gql`
  query Listings {
    listings {
      id
      title
      image
      address
      price
      numOfGuests
      numOfBeds
      numOfBaths
      rating
    }
  }
`;

const DELETE_LISTING = gql`
  mutation Mutation($id: ID!) {
    deleteListing(id: $id) {
      id
    }
  }
`;

type Props = {
  title: string;
};

const Listings = ({ title }: Props) => {
  const { data, loading, refetch, error } = useQuery<ListingsData>(LISTINGS);

  const [
    deleteListing,
    { loading: deleteListingLoading, error: deleteListingError },
  ] = useMutation<DeleteListingData, DeleteListingVariables>(DELETE_LISTING);

  const handleDeleteListing = async (id: string) => {
    await deleteListing({ variables: { id } });
    refetch();
  };

  const listings = data ? data.listings : null;

  const listingsList = listings ? (
    <Spin spinning={deleteListingLoading} size="large">
      <List
        itemLayout="horizontal"
        dataSource={listings}
        renderItem={(listing) => (
          <List.Item
            actions={[
              <Button
                type="primary"
                shape="round"
                danger
                onClick={() => handleDeleteListing(listing.id)}
              >
                Delete
              </Button>,
            ]}
          >
            <List.Item.Meta
              title={listing.title}
              description={listing.address}
              avatar={<Avatar src={listing.image} shape="square" size={48} />}
            />
          </List.Item>
        )}
      />
    </Spin>
  ) : null;

  if (loading) {
    return (
      <div className="listings">
        <ListingsSkeleton title={title} />
      </div>
    );
  }

  if (error) {
    return (
      <div className="listings">
        <ListingsSkeleton title={title} error />
      </div>
    );
  }

  const deleteListingErrorMessage = deleteListingError ? (
    <h4>failed to deleting :(</h4>
  ) : null;

  return (
    <div className="listings">
      <h2>{title}</h2>
      {listingsList}
      {deleteListingErrorMessage}
    </div>
  );
};

export default Listings;
